


//support up to 6 blend layers. can easily modify your shader to use more by increasing this value and adding the extra defines to support them
#for i=0..8 ( $0 )
    #ifdef BLENDLAYER_$i    
        uniform vec4 m_BlendLayer_$i_BlendVec; //note that this needs to be a vec4 to store all possible blending vals that change every frame, as to avoid the lag from changing a float parm every frame
        uniform float m_BlendLayer_$i_Scale;
        
        uniform bool m_BlendLayer_$i_IsMultiplicative;
    
        uniform vec4 m_BlendLayer_$i_BaseColor; 
        uniform vec4 m_BlendLayer_$i_HSVScalar;
        uniform float m_BlendLayer_$i_NormalIntensity; 

        uniform float m_BlendLayer_$i_Roughness;
        uniform float m_BlendLayer_$i_Metallic;    
        uniform float m_BlendLayer_$i_AoStrength;    
        
        uniform vec4 m_BlendLayer_$i_EmissiveColor;
        uniform float m_BlendLayer_$i_EmissiveIntensity;
        
        uniform float m_BlendLayer_$i_EdgeFadeThickness;
        
        uniform vec4 m_BlendLayer_$i_EdgeFadeColorA;
        uniform vec4 m_BlendLayer_$i_EdgeFadeColorB;
        
        #for y=0..3 ( $0 )
            uniform vec2 m_BlendLayer_$i_DissolveNoiseVec_$y;
        #endfor 
        
        #ifdef BLENDLAYER_$i_HEIGHTBLENDMODE
            uniform float floorHeightPercent; //if this is (for example) 0.2f
            uniform float roofHeightPercent;
            uniform float heightEdgeBlend;
            
        #endif
        
        #ifdef BLENDLAYER_$i_NOISEDISSOLVE
            //use a noise based map or noise equations for dissolve or dissolve-like blending effects
            
        #endif
        
        #ifdef BLENDLAYER_$i_BASECOLORMAP
            uniform sampler2D m_BlendLayer_$i_BaseColorMap;
        #endif

        #ifdef BLENDLAYER_$i_NORMALMAP
            uniform sampler2D m_BlendLayer_$i_NormalMap;
        #endif    

        #ifdef BLENDLAYER_$i_METALLICROUGHNESSAOMAP
            uniform sampler2D m_BlendLayer_$i_MetallicRoughnessAoMap; //not setup to use individual roughness and metallic maps since that is less optimized, but can easily add them if needed
        #endif

        #ifdef BLENDLAYER_$i_EMISSIVEMAP
            uniform sampler2D m_BlendLayer_$i_EmissiveMap;
        #endif
    #endif
#endfor 

uniform vec3 m_BlendGroup_SpatialOriginOffset;
uniform vec3 m_BlendGroup_SpatialDimensions;

vec3 rgb2hsv(vec3 c){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c){
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec4 getTriPlanarBlend(in vec3 coords, in vec3 blending, in sampler2D map, in float scale) {
      vec4 col1 = texture2D( map, coords.yz * scale);
      vec4 col2 = texture2D( map, coords.xz * scale);
      vec4 col3 = texture2D( map, coords.xy * scale); 
      
      // blend the results of the 3 planar projections.
      vec4 tex = col1 * blending.x + col2 * blending.y + col3 * blending.z;
      
      return tex;
}

vec4 getTriPlanarNormalBlend(in vec3 coords, in vec3 blending, in sampler2D map, in float scale) {
      vec4 col1 = texture2D( map, coords.yz * scale);
      vec4 col2 = texture2D( map, coords.xz * scale);
      vec4 col3 = texture2D( map, coords.xy * scale); 
      
      col1.xyz = (col1.xyz * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0)) * vec3(1.0).xyz;
      col2.xyz = (col2.xyz * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0)) * vec3(1.0).xyz;
      col3.xyz = (col3.xyz * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0)) * vec3(1.0).xyz;
      // blend the results of the 3 planar projections.
      vec4 tex = col1 * blending.x + col2 * blending.y + col3 * blending.z;
      
      return tex;
}


void blendLayer(in int layerIndex, inout vec4 albedo, inout float Roughness, inout float Metallic, inout float ao){
    
    
//    #for l=layerIndex..layerIndex ( $0 )
//        #ifdef BLENDPERCENT_$l

//        #endif
//    #endfor
    
    
}

vec3 rnmBlendUnpacked(vec3 n1, vec3 n2){
    n1 += vec3( 0.0,  0.0, 1.0);
    n2 *= vec3(-1.0, -1.0, 1.0);
    return n1*dot(n1, n2)/n1.z - n2;
}


//note that scaledModelPos can be worldPos if not using a moving/animated model. but important to send in the actual scaled modelPos if the model is animated in order for triplanar to work (cant use real worldPos for triplanar with moving models)
void applyAllBlendEffects(inout vec4 albedo, inout vec3 normal, inout float Roughness, inout float Metallic, inout vec3 ao, inout vec4 emissive, inout float glossiness, in vec2 texCoord, in vec3 scaledModelPos, in vec3 norm, in mat3 tbnMat){
    
    //glossiness wlil be converted to roughness by just doing:
    
    #ifdef SPECGLOSSPIPELINE
        Roughness = 1.0 - glossiness;
    #endif
        
    vec3 blending = abs( norm );
    blending = (blending -0.2) * 0.7;
    blending = normalize(max(blending, 0.00001));      // Force weights to sum to 1.0 (very important!)
    float b = (blending.x + blending.y + blending.z);
    blending /= vec3(b, b, b);
    
    float scale = 1.0;
    float triScale = 1.0;
    
    vec3 blend = blending;
    
    vec4 newAlbedo, newEmissive, packedMetallicRoughnessAoVec;
    vec3 newNormal;    
    float blendPercent, newRoughness, newMetallic, newAo;
    
    float newAlpha;
    
    float modelHeight = m_BlendGroup_SpatialDimensions.y;
    float modelYPos = m_BlendGroup_SpatialOriginOffset.y;   

    float minHeightWorld = 0.0;
    float maxHeightWorld = blendPercent * modelHeight;
    
    float noiseVal;
    
    float dissolveBlendPercent;
    
    float heightScanLowerPercent;
    float heighScanUpperPercent;
        
        
    vec4 edgeFadeColorStart = vec4(0.95, 0.2, 0.1, 1.0);
    vec4 edgeFadeColorEnd = vec4(0.5, 0.92, 0.05, 1.0);
    
    vec4 gradientBlend;
    
    float dissolveEdgeThreshold = 0.0;
    float edgeFadeColorGradientVal = 0.0;
    
    float upperHeightEdgeFadeThreshold, lowerHeightEdgeFadeThreshold;
    
    float heightAsPct;
    
    float heightEdgeFadePercent = 0.0;
    
    vec4 tempAlbedo;
    
    float noiseLayerFrequency;
    float noiseLayerMagnitude;
    
    float noiseTotalMagnitude;
    
  //  albedo.xyz = vec3(0.9,0.92,0.96);

    #for i=0..8 ( $0 )
    
      //  blendLayer($i, albedo, Roughness, Metallic, ao);
    
        #ifdef BLENDLAYER_$i    
            
            tempAlbedo = vec4(1.0);
            newAlbedo = vec4(1.0);
            newEmissive = vec4(1.0);
            packedMetallicRoughnessAoVec.rgb = vec3(1.0);
            blendPercent = 0.0;
            newRoughness = 1.0;
            newMetallic = 1.0;
            newAo = 1.0;
            noiseVal = 0.0;    
            noiseTotalMagnitude = 0.0;
            newAlpha = 1.0;
            newNormal = normal;
            
            scale = m_BlendLayer_$i_Scale;
            triScale = scale;

            blendPercent = m_BlendLayer_$i_BlendVec.x;
            heightScanLowerPercent = m_BlendLayer_$i_BlendVec.y;
            heighScanUpperPercent = m_BlendLayer_$i_BlendVec.z;
            dissolveBlendPercent = m_BlendLayer_$i_BlendVec.w;
             

             //dissolve ---

             //hard coded noise inputs currently... add params for multiple layers of noise with custom frequency and amplitude eventually
             
             
             #for y=0..3 ( $0 )
                #ifdef BLENDLAYER_$i_DISSOLVENOISEVEC_$y
                    noiseLayerFrequency = m_BlendLayer_$i_DissolveNoiseVec_$y.x;
                    noiseLayerMagnitude = m_BlendLayer_$i_DissolveNoiseVec_$y.y; 

                    noiseVal+= Noise3D(scaledModelPos, noiseLayerFrequency) * noiseLayerMagnitude;
                    noiseTotalMagnitude += noiseLayerMagnitude;

                #endif
                

            
            #endfor
            
            if(noiseTotalMagnitude > 0.0 && noiseVal > 0.0){
                noiseVal = mix(0.0, 1.0, (noiseVal / noiseTotalMagnitude)); //put back into 0-1 range          
            //   noiseVal = noiseVal / noiseTotalMagnitude;
            //   noiseVal = clamp(0.0, 1.0);

               noiseVal = max(0.0, noiseVal);
               noiseVal = min(noiseVal, 1.0);
            
            }    
            
            if(dissolveBlendPercent > noiseVal){
                
                blendPercent*= 1.0;
                //discard;
            }else{
                blendPercent = 0.0;
            }

            //---


            #ifdef BLENDLAYER_$i_BASECOLORMAP
                #ifdef BLENDLAYER_$i_TRIPLANAR    
                    tempAlbedo = getTriPlanarBlend(scaledModelPos, blending, m_BlendLayer_$i_BaseColorMap, triScale);
                #else
                    tempAlbedo = texture2D(m_BlendLayer_$i_BaseColorMap, texCoord * scale);
                #endif
                
                if(m_BlendLayer_$i_IsMultiplicative == true){
                    newAlbedo = tempAlbedo * albedo;
                }
                else{
                    newAlbedo = tempAlbedo;
                }    
                
            #else
                if(m_BlendLayer_$i_IsMultiplicative == true){
                    newAlbedo = albedo;
                }            
            #endif
            
   
            
            //modify albedo color in HSV space (does nothing if default value for m_BlendLayer_$i_HSVScalar is left as 0,0,0)
            newAlbedo.rgb = rgb2hsv(newAlbedo.rgb).rgb; //could probably put this HSV scaling in an #ifdef once this shader is running on a newer version of jme that supports >64 defines per shader. but for now have to be conservative with defines
            
            newAlbedo.x += m_BlendLayer_$i_HSVScalar.x;         //modify hue
            newAlbedo.y += m_BlendLayer_$i_HSVScalar.y ;       //modify saturation
            newAlbedo.z += m_BlendLayer_$i_HSVScalar.z;       //modify value(brightness)


            newAlbedo.x = mod(newAlbedo.x + 1, 1);  //keep hue values in range of 0-1 in cases where added values makes it over 1


            // max and min all final HSV values to be between 0-1
            newAlbedo.x = max(newAlbedo.x, 0.0);
            newAlbedo.x = min(newAlbedo.x, 1.0);

            newAlbedo.y = max(newAlbedo.y, 0.0);
            newAlbedo.y = min(newAlbedo.y, 1.0);

            newAlbedo.z = max(newAlbedo.z, 0.0);
            newAlbedo.z = min(newAlbedo.z, 1.0);

            //convert back to RGB and set albedo's new color
            newAlbedo.rgb = hsv2rgb(newAlbedo.rgb).rgb;
            
            //multiply the regular color param after applying hsv, that way you can use full desaturation in HSV space then multiply by a color for more precise color selections 
            newAlbedo *= m_BlendLayer_$i_BaseColor;
            
            newAlpha = newAlbedo.a;
            
            newAlpha = min(newAlpha, 1.0);
            newAlpha = max(newAlpha, 0.0);
            


            

            
            #ifdef BLENDLAYER_$i_NORMALMAP
                #ifdef BLENDLAYER_$i_TRIPLANAR    
                
                    newNormal = normalize(getTriPlanarNormalBlend(scaledModelPos, blend, m_BlendLayer_$i_NormalMap, triScale ).xyz);
             //       newNormal = normalize((newNormal.xyz * vec3(2.0, 2.0, 2.0) - vec3(1.0, 1.0, 1.0))) * vec3(1.0);
                    newNormal = normalize(tbnMat * newNormal);       //currently broken...
                    
                #else
                    newNormal = texture2D(m_BlendLayer_$i_NormalMap, texCoord * scale).xyz; //non triplanar use for pre-made texture atlases
                    newNormal = normalize((newNormal.xyz * vec3(2.0,  2.0, 2.0) - vec3(1.0, NORMAL_TYPE * 1.0, 1.0)));
                    newNormal = normalize(tbnMat * newNormal);                    
                #endif
            #endif

            newRoughness = m_BlendLayer_$i_Roughness;
            newMetallic = m_BlendLayer_$i_Metallic;
            newAo = m_BlendLayer_$i_AoStrength;
            

            
            #ifdef BLENDLAYER_$i_METALLICROUGHNESSAOMAP
                #ifdef BLENDLAYER_$i_TRIPLANAR             
                    packedMetallicRoughnessAoVec = getTriPlanarBlend(scaledModelPos, blending, m_BlendLayer_$i_MetallicRoughnessAoMap, triScale);
                #else
                    packedMetallicRoughnessAoVec = texture2D(m_BlendLayer_$i_MetallicRoughnessAoMap, texCoord * scale);
                #endif
                newRoughness *= packedMetallicRoughnessAoVec.g;
                newMetallic *= packedMetallicRoughnessAoVec.b;
                newAo *= packedMetallicRoughnessAoVec.r;
            #endif
            
            if(m_BlendLayer_$i_IsMultiplicative == true){
                newRoughness = newRoughness * Roughness;
                newMetallic = newMetallic * Metallic;
                newAo = newAo * ao.r;
            }
            

            #ifdef BLENDLAYER_$i_EMISSIVEMAP            
                #ifdef BLENDLAYER_$i_TRIPLANAR     
                    newEmissive = getTriPlanarBlend(scaledModelPos, blending, m_BlendLayer_$i_EmissiveMap, triScale); 
                #else
                    newEmissive = texture2D(m_BlendLayer_$i_EmissiveMap, texCoord * scale);
                #endif
            #endif        
            
            newEmissive *= m_BlendLayer_$i_EmissiveColor;            
            newEmissive *= m_BlendLayer_$i_EmissiveIntensity;
            
            
                         
             
             // --- height blending:
             
            maxHeightWorld = heighScanUpperPercent * modelHeight;            
            minHeightWorld = heightScanLowerPercent * modelHeight;
            
            heightAsPct = (scaledModelPos.y - modelYPos) / (modelHeight - modelYPos);
            
            upperHeightEdgeFadeThreshold = heighScanUpperPercent + m_BlendLayer_$i_EdgeFadeThickness / modelHeight;
            lowerHeightEdgeFadeThreshold = heightScanLowerPercent - m_BlendLayer_$i_EdgeFadeThickness / modelHeight;
            
            heightEdgeFadePercent = 0.0;
            
            if(heightAsPct < upperHeightEdgeFadeThreshold && heightAsPct > lowerHeightEdgeFadeThreshold){
            
                blendPercent *= 1.0; 
                
                if(heightAsPct > heighScanUpperPercent){
                    heightEdgeFadePercent = 1.0 - ((upperHeightEdgeFadeThreshold - heightAsPct) / (m_BlendLayer_$i_EdgeFadeThickness  / modelHeight));
                }    
                else if(heightAsPct < heightScanLowerPercent){
                    heightEdgeFadePercent = 1.0 - ((heightAsPct -lowerHeightEdgeFadeThreshold) / (m_BlendLayer_$i_EdgeFadeThickness / modelHeight));
                }   

                
                //if(scaledModelPos.y < maxHeightWorld && scaledModelPos.y > minHeightWorld){
            }       
            else{
               blendPercent = 0.0;
            }
            if(heightEdgeFadePercent > 0.0){
                gradientBlend = mix(m_BlendLayer_$i_EdgeFadeColorB, m_BlendLayer_$i_EdgeFadeColorA, heightEdgeFadePercent);
                
                newAlbedo = mix(gradientBlend, newAlbedo, gradientBlend.a);
                
                //add emissive here for edgeFade eventually
                newAlpha = max(newAlbedo.a, newAlpha);

                blendPercent *= 1.0 - heightEdgeFadePercent;
            }
             // ---
             

            //dissolve edgeFade done after albedo calculation as to properly override the value
            dissolveEdgeThreshold = noiseVal + m_BlendLayer_$i_EdgeFadeThickness;

            if(dissolveBlendPercent < dissolveEdgeThreshold){

                edgeFadeColorGradientVal = (dissolveEdgeThreshold - dissolveBlendPercent) / m_BlendLayer_$i_EdgeFadeThickness;
                
                if(heightEdgeFadePercent > 0.0){
                    edgeFadeColorGradientVal *= heightEdgeFadePercent;
                }

                if(edgeFadeColorGradientVal >= 0.0 && edgeFadeColorGradientVal <= 1.0){
                    
                 
                    gradientBlend = mix(m_BlendLayer_$i_EdgeFadeColorB, m_BlendLayer_$i_EdgeFadeColorA, edgeFadeColorGradientVal);
                    
                    newAlbedo = mix(gradientBlend, newAlbedo, gradientBlend.a);
                    //add emissive here for edgeFade eventually
                    newAlpha = max(newAlbedo.a, newAlpha);
                    
                    blendPercent *= 1.0 - edgeFadeColorGradientVal;
                }                    
            } 
            

            

            
            #ifdef BLENDLAYER_$i_BLENDALPHA
                blendPercent *= newAlpha; //use alpha as multiplier for blend value, and not transparency for this layer
                newAlpha = 1.0;
            #else    
                
            #endif
            newAlbedo.a = newAlpha;
            
            albedo = mix(albedo, newAlbedo, blendPercent);    
            alpha = mix(alpha, newAlpha, blendPercent);
            normal = mix(normal, newNormal, blendPercent);                             
            Roughness = mix(Roughness, newRoughness, blendPercent);
            Metallic = mix(Metallic, newMetallic, blendPercent);
            ao.rgb = mix(ao.rgb, vec3(newAo), blendPercent);            
            emissive = mix(emissive, newEmissive, blendPercent);

            albedo = clamp(albedo, vec4(0.0), vec4(1.0));
            Roughness = clamp(Roughness, 0.0, 1.0);
            Metallic = clamp(Metallic, 0.0, 1.0);
            ao = clamp(ao, vec3(0.0), vec3(1.0));

            
        #endif
   
    
    #endfor
    
        if(alpha < 0.001){
            discard;
        }
    
    //convert roughness back to glossiness in case spec gloss is being used by the main shader:
    glossiness = 1.0 - Roughness;
}
