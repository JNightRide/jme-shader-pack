#import "Common/ShaderLib/Parallax.glsllib"

varying vec4 Color;

#ifdef BASECOLORMAP
    uniform sampler2D m_BaseColorMap;
#endif

#ifdef USE_PACKED_MR
    uniform sampler2D m_MetallicRoughnessMap;
#else
    #ifdef METALLICMAP
        uniform sampler2D m_MetallicMap;
    #endif
    #ifdef ROUGHNESSMAP
        uniform sampler2D m_RoughnessMap;
    #endif
#endif

#ifdef EMISSIVE
    uniform vec4 m_Emissive;
#endif
#ifdef EMISSIVEMAP
    uniform sampler2D m_EmissiveMap;
#endif
#if defined(EMISSIVE) || defined(EMISSIVEMAP)
    uniform float m_EmissivePower;
    uniform float m_EmissiveIntensity;
#endif 

uniform float m_Roughness;
uniform float m_Metallic;

#ifdef SPECGLOSSPIPELINE
    uniform vec4 m_Specular;
    uniform float m_Glossiness;
    #ifdef USE_PACKED_SG
        uniform sampler2D m_SpecularGlossinessMap;
    #else
        uniform sampler2D m_SpecularMap;
        uniform sampler2D m_GlossinessMap;
    #endif
#endif

#ifdef PARALLAXMAP
    uniform sampler2D m_ParallaxMap;  
#endif
#if (defined(PARALLAXMAP) || (defined(NORMALMAP_PARALLAX) && defined(NORMALMAP)))
    uniform float m_ParallaxHeight;
#endif

#ifdef LIGHTMAP
    uniform sampler2D m_LightMap;
#endif

#ifdef AO_STRENGTH
    uniform float m_AoStrength;
#endif

// Specular-AA
#ifdef SPECULAR_AA_SCREEN_SPACE_VARIANCE
    uniform float m_SpecularAASigma;
#endif
#ifdef SPECULAR_AA_THRESHOLD
    uniform float m_SpecularAAKappa;
#endif
  
#if defined(NORMALMAP) || defined(PARALLAXMAP)
    uniform sampler2D m_NormalMap;       
#endif
#ifdef NORMALSCALE
    uniform float m_NormalScale;
#endif

#if defined(USE_VERTEX_COLORS_AS_SUN_INTENSITY)
    varying vec4 vertColors;
#endif
#ifdef STATIC_SUN_INTENSITY
    uniform float m_StaticSunIntensity;
#endif

//void readMatParamsAndTextures(in mat3 tbnMat, in vec3 vViewDir, inout vec4 albedo, inout float Metallic, inout float Roughness, inout vec4 SpecularColor, inout float glossiness, inout vec3 lightMapColor, inout vec3 ao, inout vec3 normal, inout vec4 emissive, inout float alpha){
void readMatParamsAndTextures(){
    #if (defined(PARALLAXMAP) || (defined(NORMALMAP_PARALLAX) && defined(NORMALMAP)))
        #ifdef STEEP_PARALLAX
            #ifdef NORMALMAP_PARALLAX
                //parallax map is stored in the alpha channel of the normal map         
                newTexCoord = steepParallaxOffset(m_NormalMap, vViewDir, texCoord, m_ParallaxHeight);
            #else
                //parallax map is a texture
                newTexCoord = steepParallaxOffset(m_ParallaxMap, vViewDir, texCoord, m_ParallaxHeight);         
            #endif
        #else
            #ifdef NORMALMAP_PARALLAX
                //parallax map is stored in the alpha channel of the normal map         
                newTexCoord = classicParallaxOffset(m_NormalMap, vViewDir, texCoord, m_ParallaxHeight);
            #else
               //parallax map is a texture
               newTexCoord = classicParallaxOffset(m_ParallaxMap, vViewDir, texCoord, m_ParallaxHeight);
           #endif
       #endif
    #else
       newTexCoord = texCoord;    
    #endif
    
    #ifdef BASECOLORMAP
        albedo = texture2D(m_BaseColorMap, newTexCoord) * Color;
    #else
        albedo = Color;
    #endif
    
    alpha = albedo.a;

    #ifdef DISCARD_ALPHA
        if(alpha < m_AlphaDiscardThreshold){
            discard;
        }
    #endif

    //ao in r channel, roughness in green channel, metallic in blue channel!
    vec3 aoRoughnessMetallicValue = vec3(1.0, 1.0, 0.0);
    #ifdef USE_PACKED_MR
        aoRoughnessMetallicValue = texture2D(m_MetallicRoughnessMap, newTexCoord).rgb;
        Roughness = aoRoughnessMetallicValue.g * max(m_Roughness, 1e-4);
        Metallic = aoRoughnessMetallicValue.b * max(m_Metallic, 0.0);
    #else
        #ifdef ROUGHNESSMAP
            Roughness = texture2D(m_RoughnessMap, newTexCoord).r * max(m_Roughness, 1e-4);
        #else
            Roughness =  max(m_Roughness, 1e-4);
        #endif
        #ifdef METALLICMAP
            Metallic = texture2D(m_MetallicMap, newTexCoord).r * max(m_Metallic, 0.0);
        #else
            Metallic =  max(m_Metallic, 0.0);
        #endif
    #endif
 
    #if defined(NORMALMAP)
        vec4 normalHeight = texture2D(m_NormalMap, newTexCoord);
        // Note we invert directx style normal maps to opengl style
        #ifdef NORMALSCALE
            normal = normalize((normalHeight.xyz * vec3(2.0, NORMAL_TYPE * 2.0, 2.0) - vec3(1.0, NORMAL_TYPE * 1.0, 1.0)) * vec3(m_NormalScale, m_NormalScale, 1.0));
        #else
            normal = normalize((normalHeight.xyz * vec3(2.0, NORMAL_TYPE * 2.0, 2.0) - vec3(1.0, NORMAL_TYPE * 1.0, 1.0)));
        #endif
        normal = normalize(tbnMat * normal);
        //normal = normalize(normal * inverse(tbnMat));
    #endif
    
    //spec gloss tex reads:
    
    #ifdef SPECGLOSSPIPELINE
        #ifdef USE_PACKED_SG
            specularColor = texture2D(m_SpecularGlossinessMap, newTexCoord);
            glossiness = specularColor.a * m_Glossiness;
            specularColor *= m_Specular;
        #else
            #ifdef SPECULARMAP
                specularColor = texture2D(m_SpecularMap, newTexCoord);
            #else
                specularColor = vec4(1.0);
            #endif
            #ifdef GLOSSINESSMAP
                glossiness = texture2D(m_GlossinesMap, newTexCoord).r * m_Glossiness;
            #else
                glossiness = m_Glossiness;
            #endif
            specularColor *= m_Specular;
        #endif
    #endif
    
    
    #ifdef LIGHTMAP
        #ifdef SEPARATE_TEXCOORD
            lightMapColor = texture2D(m_LightMap, texCoord2).rgb;
        #else
            lightMapColor = texture2D(m_LightMap, texCoord).rgb;
        #endif       
        
        #ifdef AO_MAP
            lightMapColor.gb = lightMapColor.rr; 
            ao = lightMapColor;
        #endif
    #endif
    
    #if defined(AO_PACKED_IN_MR_MAP) && defined(USE_PACKED_MR) 
        ao = aoRoughnessMetallicValue.rrr; //note that this will override the AO value if it was previously read from a lightMap that is being used as AO_Map above. so don't try to use an AO map packed in metallic roughness while also using lightmap as ao map
    #endif

    #ifdef AO_STRENGTH
        ao = 1.0 + m_AoStrength * (ao - 1.0);
        // sanity check
        ao = clamp(ao, 0.0, 1.0);
    #endif
    
    #if defined(EMISSIVE) || defined (EMISSIVEMAP)
        #ifdef EMISSIVEMAP
            emissive = texture2D(m_EmissiveMap, newTexCoord);
            #ifdef EMISSIVE
            emissive *= m_Emissive;
            #endif
        #endif
        emissive = emissive * pow(emissive.a, m_EmissivePower) * m_EmissiveIntensity;
    #endif
    
    #ifdef STATIC_SUN_INTENSITY
        indoorSunLightExposure = m_StaticSunIntensity; //single float value to indicate percentage of sunlight hitting the model (only suitable for small models or models with equal sunlight exposure accross the entire model
    #endif
    #ifdef USE_VERTEX_COLORS_AS_SUN_INTENSITY
        indoorSunLightExposure = vertColors.r * indoorSunLightExposure;    // use red channel of vertexColors for non-uniform sunlighting accross a single model
    #endif 
    
}